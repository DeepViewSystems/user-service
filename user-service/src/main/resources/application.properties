# =============================================================
# CONFIGURACI�N B�SICA
# =============================================================
spring.application.name=user-service
spring.profiles.active=dev
server.port=8085

# =============================================================
# INFORMACI�N DE LA APLICACI�N
# =============================================================
app.name=User-Service
app.desc=User Service API developed by Deep View Systems
app.version=1.0.0
app.url=http://localhost:8085
app.organization=Deep View Systems
app.contact-email=dvs@dvs.com

# =============================================================
# CONFIGURACI�N DE LOGS
# =============================================================
logging.level.org.springframework=INFO
logging.level.com.techforb=DEBUG

# =============================================================
# CONFIGURACI�N OAUTH2 PARA GOOGLE - CORREGIDA
# =============================================================

# -- Credenciales de Google --
spring.security.oauth2.client.registration.google.client-id=436294285629-nd9s2326t12qgbqhim69or65jkpd3aa6.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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

# -- Scopes (permisos) --
spring.security.oauth2.client.registration.google.scope=openid,email,profile

# -- URI de Redirecci�n CORREGIDA --
# IMPORTANTE: Esta debe ser exactamente as� para Spring Security
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8085/login/oauth2/code/google

# -- Tipo de flujo --
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# -- Configuraci�n del Proveedor Google (A�ADIDO) --
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-name-attribute=sub


# =============================================================
# CONFIGURACIÓN JWT
# =============================================================
app.jwt.secret=5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437
app.jwt.access-token-expiration=86400
app.jwt.refresh-token-expiration=604800

# =============================================================
# CONFIGURACIÓN FRONTEND
# =============================================================
# URL del frontend para reset de contraseña (configurar según tu frontend)
app.frontend.password-reset-url=http://localhost:4200/reset-password

# =============================================================
# CONFIGURACIÓN PASSWORD RESET
# =============================================================
# Tiempo de expiración del token de reset (horas)
app.password-reset.token-expiration-hours=1

# =============================================================
# CONFIGURACIÓN MICROSERVICIOS
# =============================================================
# URL del microservicio de email
app.email-service.url=http://localhost:8086

# ===== KAFKA CONFIGURATION =====
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.linger.ms=1
spring.kafka.producer.buffer.memory=33554432

# ===== KAFKA TOPICS =====
app.kafka.topics.security-audit=security-audit-events
app.kafka.topics.user-security=user-security-events

# ===== REDIS CONFIGURACIÓN =====
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.database=0
spring.data.redis.timeout=2000ms
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0

# Cache configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=3600000
spring.cache.redis.cache-null-values=false

# ===== PROMETHEUS Y ACTUATOR CONFIGURACIÓN =====
# Actuator endpoints
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.prometheus.enabled=true
management.endpoint.health.show-details=always

# Métricas personalizadas
management.metrics.tags.service=user-service
management.metrics.tags.environment=development
management.metrics.tags.version=1.0.0

# Prometheus scraping
management.metrics.export.prometheus.enabled=true
management.metrics.export.prometheus.descriptions=true
management.metrics.export.prometheus.step=10s

# Métricas de JVM
management.metrics.enable.jvm=true
management.metrics.enable.process=true
management.metrics.enable.system=true

# =============================================================
# CONFIGURACIÓN OAUTH2 ADICIONAL
# =============================================================
# Propiedades adicionales para OAuth2Config
app.oauth2.local-client.secret=secret
app.oauth2.local-client.redirect-uri=http://127.0.0.1:8085/login/oauth2/code/local-client